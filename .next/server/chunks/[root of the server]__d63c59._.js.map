{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///Users/federicocaccia/code/daily-review/src/utils/spreadsheet.ts"],"sourcesContent":["import { GoogleSpreadsheet, GoogleSpreadsheetRow } from 'google-spreadsheet';\nimport { JWT } from 'google-auth-library';\nimport { Section } from '@/types';\n\nlet doc: GoogleSpreadsheet;\n\n// Inicializar la conexión\nasync function initializeSheet() {\n  if (!doc) {\n    const SCOPES = [\n      'https://www.googleapis.com/auth/spreadsheets',\n    ];\n\n    const jwt = new JWT({\n      email: process.env.GOOGLE_SHEETS_CLIENT_EMAIL,\n      key: process.env.GOOGLE_SHEETS_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\n      scopes: SCOPES,\n    });\n\n    doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_SPREADSHEET_ID!, jwt);\n    await doc.loadInfo();\n  }\n}\n\n// Actualizar un campo individual\nexport async function updateField(date: string, sectionId: string, fieldId: string, value: any) {\n  await initializeSheet();\n  const sheet = doc.sheetsByIndex[0];\n  \n  const rows = await sheet.getRows();\n  const rowIndex = rows.findIndex(row => row.get('date') === date);\n  \n  if (rowIndex === -1) {\n    // Si no existe la fila, la creamos\n    await sheet.addRow({\n      date,\n      [`${sectionId}_${fieldId}`]: value\n    });\n  } else {\n    // Si existe, actualizamos el campo específico\n    rows[rowIndex].set(`${sectionId}_${fieldId}`, value);\n    await rows[rowIndex].save();\n  }\n}\n\n// Actualizar las notas diarias\nexport async function updateNotes(date: string, notes: string) {\n  await initializeSheet();\n  const sheet = doc.sheetsByIndex[0];\n  \n  const rows = await sheet.getRows();\n  const rowIndex = rows.findIndex(row => row.get('date') === date);\n  \n  if (rowIndex === -1) {\n    await sheet.addRow({\n      date,\n      notes\n    });\n  } else {\n    rows[rowIndex].set('notes', notes);\n    await rows[rowIndex].save();\n  }\n}\n\n// Obtener datos de un día específico\nexport async function getDayData(date: string): Promise<GoogleSpreadsheetRow | undefined> {\n  await initializeSheet();\n  const sheet = doc.sheetsByIndex[0];\n  \n  const rows = await sheet.getRows();\n  return rows.find(row => row.get('date') === date);\n} "],"names":[],"mappings":";;;;;AAAA;;;;;;;;AAIA,IAAI;AAEJ,0BAA0B;AAC1B,eAAe;IACb,IAAI,CAAC,KAAK;QACR,MAAM,SAAS;YACb;SACD;QAED,MAAM,MAAM,IAAI,IAAI;YAClB,OAAO,QAAQ,GAAG,CAAC,0BAA0B;YAC7C,KAAK,QAAQ,GAAG,CAAC,yBAAyB,EAAE,QAAQ,QAAQ;YAC5D,QAAQ;QACV;QAEA,MAAM,IAAI,yJAAA,CAAA,oBAAiB,CAAC,QAAQ,GAAG,CAAC,4BAA4B,EAAG;QACvE,MAAM,IAAI,QAAQ;IACpB;AACF;AAGO,eAAe,YAAY,IAAY,EAAE,SAAiB,EAAE,OAAe,EAAE,KAAU;IAC5F,MAAM;IACN,MAAM,QAAQ,IAAI,aAAa,CAAC,EAAE;IAElC,MAAM,OAAO,MAAM,MAAM,OAAO;IAChC,MAAM,WAAW,KAAK,SAAS,CAAC,CAAA,MAAO,IAAI,GAAG,CAAC,YAAY;IAE3D,IAAI,aAAa,CAAC,GAAG;QACnB,mCAAmC;QACnC,MAAM,MAAM,MAAM,CAAC;YACjB;YACA,CAAC,GAAG,UAAU,CAAC,EAAE,SAAS,CAAC,EAAE;QAC/B;IACF,OAAO;QACL,8CAA8C;QAC9C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,EAAE,SAAS,EAAE;QAC9C,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI;IAC3B;AACF;AAGO,eAAe,YAAY,IAAY,EAAE,KAAa;IAC3D,MAAM;IACN,MAAM,QAAQ,IAAI,aAAa,CAAC,EAAE;IAElC,MAAM,OAAO,MAAM,MAAM,OAAO;IAChC,MAAM,WAAW,KAAK,SAAS,CAAC,CAAA,MAAO,IAAI,GAAG,CAAC,YAAY;IAE3D,IAAI,aAAa,CAAC,GAAG;QACnB,MAAM,MAAM,MAAM,CAAC;YACjB;YACA;QACF;IACF,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS;QAC5B,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI;IAC3B;AACF;AAGO,eAAe,WAAW,IAAY;IAC3C,MAAM;IACN,MAAM,QAAQ,IAAI,aAAa,CAAC,EAAE;IAElC,MAAM,OAAO,MAAM,MAAM,OAAO;IAChC,OAAO,KAAK,IAAI,CAAC,CAAA,MAAO,IAAI,GAAG,CAAC,YAAY;AAC9C"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///Users/federicocaccia/code/daily-review/src/app/api/update-field/route.ts"],"sourcesContent":["import { updateField } from '@/utils/spreadsheet';\nimport { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n  try {\n    const { date, sectionId, fieldId, value } = await request.json();\n    await updateField(date, sectionId, fieldId, value);\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error updating field:', error);\n    return NextResponse.json({ success: false, error: 'Failed to update field' }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;QAC9D,MAAM,CAAA,GAAA,6HAAA,CAAA,cAAW,AAAD,EAAE,MAAM,WAAW,SAAS;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAC9F;AACF"}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}